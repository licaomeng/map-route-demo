{"version":3,"sources":["utils/fetch/index.js","components/geocoder/index.jsx","utils/is/index.js","components/polyline-overlay/index.jsx","utils/decorators/loading.js","utils/decorators/handleError.js","App.js","serviceWorker.js","index.js"],"names":["Fetch","a","args","url","options","times","Promise","reject","fetch","res","ok","json","status","error","others","resolve","Geocoder","props","label","latitude","longitude","onChange","onLocationChange","value","defaultProps","getOptionLabel","option","text","fetchGeoList","searchText","process","proximity","encodeURI","setAutocompleteProps","features","prevValue","ref","useRef","useEffect","current","usePrevious","then","location","setLocation","obj","useState","autocompleteProps","style","width","Autocomplete","constructor","Object","entries","length","onSelect","v","item","find","target","center","renderInput","params","TextField","margin","PolylineOverlay","height","ctx","isDragging","project","unproject","this","points","color","lineWidth","renderWhileDragging","clearRect","globalCompositeOperation","strokeStyle","beginPath","forEach","point","pixel","Number","lineTo","stroke","redraw","_redraw","bind","PureComponent","useStyles","makeStyles","theme","backdrop","zIndex","drawer","closeLoading","ReactDOM","render","document","getElementById","openLoading","classes","Backdrop","className","open","CircularProgress","Alert","elevation","variant","openAlert","e","Snackbar","severity","message","closeAlert","root","display","appBar","marginLeft","flexShrink","drawerPaper","drawerContainer","alignItems","flexDirection","resultContainer","toolbar","mixins","content","flexGrow","backgroundColor","palette","background","default","padding","spacing","App","initViewport","zoom","viewport","setViewport","waypoints","setWaypoints","navigator","geolocation","getCurrentPosition","position","coords","start","setStart","end","setEnd","startText","setStartText","endText","setEndText","result","setResult","Dummy","name","descriptor","origin","setTimeout","method","body","JSON","stringify","destination","token","path","total_distance","total_time","fetchRoute","Drawer","paper","anchor","join","mapboxApiAccessToken","onViewportChange","onClick","val","lngLat","justifyContent","positionOptions","enableHighAccuracy","trackUserLocation","offsetTop","offsetLeft","xmlns","href","isSafari","transform","map","i","Boolean","window","hostname","match","require","config","StrictMode","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c763e9dc.chunk.js","sourcesContent":["/**\n * Customized Fetch\n * wrapped the `window.fetch()`, unify the data format and the error handling\n * \n * \"in progress\": retry\n * \"failure\": error msg\n * \"success\": display data\n * \n * @param  {...any} args same as the arguments `window.fetch()`, also append retry times\n */\nasync function Fetch(...args) {\n  let [url, options, times = 0] = args\n  if (times >= 5) {\n    // retry times limited to 5\n    return Promise.reject('request time out')\n  }\n  const res = await fetch(url, options)\n  if (res.ok) {\n    // succeeded\n    let json = await res.json();\n    const { status, error, ...others } = json\n    if (status === 'failure') {\n      return Promise.reject(error)\n    }\n    if (status === 'in progress') {\n      // retry logic\n      return Fetch(url, options, ++times)\n    }\n    return Promise.resolve(others)\n  } else if(res.status === 500) {\n    // 500: Internal Server Error\n    return Promise.reject('Internal Server Error')\n  } else {\n    // other codes\n    return Promise.reject('request failed')\n  }\n}\n\nexport default Fetch","/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Fetch from '../../utils/fetch'\nimport { isEmptyObj } from '../../utils/is'\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Geocoder(props) {\n  const {\n    label,\n    // proximity\n    latitude,\n    longitude,\n    // coordinate\n    onChange,\n    // location name\n    onLocationChange,\n    // controlled prop\n    value\n  } = props;\n  const defaultProps = {\n    options: [],\n    getOptionLabel: (option) => option?.text || '',\n  };\n\n  // invoke Mapbox Geocoding API\n  // Doc see: https://docs.mapbox.com/api/search/#geocoding\n  // searchText supports two formats: 1. plain text; 2. string `${longitude},${latitude}`\n  const fetchGeoList = async (searchText) => {\n    // access token\n    const accessToken = process.env.REACT_APP_ACCESS_TOKEN\n    // default to current location\n    const proximity = [longitude, latitude]\n    const res = await Fetch(`//api.mapbox.com/geocoding/v5/mapbox.places/${encodeURI(searchText)}.json?proximity=${proximity}&access_token=${accessToken}`)\n    // update Autocomplete options\n    setAutocompleteProps({\n      ...defaultProps,\n      options: res.features\n    })\n    // return first option to fill TextField\n    return res.features?.[0]\n  }\n\n  const prevValue = usePrevious(value)\n  useEffect(() => {\n    // controlled property value\n    if (value && !prevValue) {\n      // picked location on Map provider\n      fetchGeoList(value).then(location => {\n        setLocation(location)\n        onLocationChange(location?.text)\n      })\n    } else if (!value) {\n      // remove value\n      setLocation('')\n    }\n  }, [value])\n\n  // mainly set options\n  const [autocompleteProps, setAutocompleteProps] = useState(defaultProps)\n  // set `value` field\n  const [location, setLocation] = useState('')\n\n  return (\n    <div style={{ width: 300 }}>\n      <Autocomplete\n        {...autocompleteProps}\n        value={isEmptyObj(location) ? '' : location}\n        onSelect={(v) => {\n          const options = autocompleteProps.options\n          const item = options.find(item => item.text === v.target.value) || {}\n          const { center = [], text = '' } = item\n          setLocation(item)\n          onChange(center)\n          onLocationChange(text)\n        }}\n        renderInput={(params) =>\n          <TextField\n            {...params}\n            label={label}\n            margin=\"normal\"\n            onChange={v => {\n              fetchGeoList(v.target.value)\n            }}\n          />\n        }\n      />\n    </div>\n  );\n}\n","const isEmptyObj = obj => obj !== void 0 && obj.constructor === Object && Object.entries(obj).length === 0\nconst isObj = obj => obj !== void 0 && obj.constructor === Object\n\nexport {\n  isEmptyObj,\n  isObj\n}","import React, { PureComponent } from 'react'\nimport { CanvasOverlay } from 'react-map-gl';\n\nclass PolylineOverlay extends PureComponent {\n  _redraw({ width, height, ctx, isDragging, project, unproject }) {\n    const { points, color = 'red', lineWidth = 2, renderWhileDragging = true } = this.props\n    ctx.clearRect(0, 0, width, height)\n    ctx.globalCompositeOperation = 'lighter'\n\n    if ((renderWhileDragging || !isDragging) && points) {\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = color\n      ctx.beginPath()\n      points.forEach(point => {\n        const pixel = project([Number(point[1]), Number(point[0])])\n        ctx.lineTo(pixel[0], pixel[1])\n      })\n      ctx.stroke()\n    }\n  }\n\n  render() {\n    return <CanvasOverlay redraw={this._redraw.bind(this)} />\n  }\n}\n\nexport default PolylineOverlay","/**\n * Customized decorator\n * wrap a Promise, unify the loading effect\n */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n}));\n\nfunction closeLoading() {\n  ReactDOM.render(\n    <></>,\n    document.getElementById('loading')\n  );\n}\n\nfunction openLoading(classes) {\n  ReactDOM.render(\n    <Backdrop className={classes.backdrop} open={true}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>,\n    document.getElementById('loading')\n  );\n}\n\nexport default (...config) => (target, name, descriptor) => {\n  const origin = descriptor.value\n  const classes = useStyles();\n\n  descriptor.value = async (...args) => {\n    openLoading(classes)\n    await origin(...args)\n    closeLoading()\n  }\n\n  return descriptor\n}","/**\n * Customized decorator\n * wrap a Promise, unify error handling effect\n */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction closeLoading() {\n  ReactDOM.render(\n    <></>,\n    document.getElementById('loading')\n  );\n}\n\nfunction openAlert(e) {\n  ReactDOM.render(\n    <Snackbar open={true}>\n      <Alert severity=\"error\">\n        {e?.message || e}\n      </Alert>\n    </Snackbar>,\n    document.getElementById('alert')\n  );\n}\n\nfunction closeAlert() {\n  ReactDOM.render(\n    <></>,\n    document.getElementById('alert')\n  );\n}\n\nexport default (...config) => (target, name, descriptor) => {\n  const origin = descriptor.value\n\n  descriptor.value = async (...args) => {\n    try {\n      await origin(...args)\n    } catch (e) {\n      closeLoading()\n      openAlert(e)\n      setTimeout(() => {\n        closeAlert()\n      }, 6000)\n    }\n  }\n\n  return descriptor\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport ReactMapGL, { Marker, GeolocateControl } from 'react-map-gl';\nimport { isSafari } from \"react-device-detect\";\nimport Geocoder from './components/geocoder'\nimport PolylineOverlay from './components/polyline-overlay'\nimport Fetch from './utils/fetch'\nimport loading from './utils/decorators/loading'\nimport handleError from './utils/decorators/handleError'\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport './App.css';\n\nconst drawerWidth = 360;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  resultContainer: {\n    display: 'flex',\n    alignItems: 'left',\n    margin: '28px',\n    flexDirection: 'column'\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App(props) {\n  const initViewport = {\n    width: '100%',\n    height: '100%',\n    latitude: 37.7577,\n    longitude: 122.4376,\n    zoom: 13\n  }\n  const [viewport, setViewport] = useState({ ...initViewport })\n  const [waypoints, setWaypoints] = useState([])\n  if (\"geolocation\" in navigator) {\n    navigator.geolocation.getCurrentPosition(position => {\n      const { latitude, longitude } = viewport\n      if (latitude === initViewport.latitude && longitude === initViewport.longitude) {\n        setViewport({\n          ...initViewport,\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        })\n      }\n    });\n  }\n  const classes = useStyles();\n  const [start, setStart] = useState([])\n  const [end, setEnd] = useState([])\n  const [startText, setStartText] = useState('')\n  const [endText, setEndText] = useState('')\n  const [result, setResult] = useState({})\n  const handleClick = val => {\n    const { lngLat: [longitude, latitude] } = val\n    if (!start.length) {\n      setStart([longitude, latitude])\n    } else if (!end.length) {\n      setEnd([longitude, latitude])\n    }\n  }\n\n  // this dummy class for the use of decorators\n  class Dummy {\n    @handleError()\n    @loading()\n    static async fetchRoute() {\n      const { token } = await Fetch('//mock-api.dev.lalamove.com/route', {\n        method: 'POST',\n        // mode: \"no-cors\",\n        body: JSON.stringify({\n          origin: startText,\n          destination: endText\n        })\n      });\n      const res = await Fetch(`//mock-api.dev.lalamove.com/route/${token}`)\n      const { path, total_distance, total_time } = res\n      setWaypoints(path)\n      setResult({ total_distance, total_time })\n    }\n  }\n\n  useEffect(() => {\n    if (startText && endText) {\n      Dummy.fetchRoute()\n    }\n    if (!startText || !endText) {\n      setWaypoints([])\n      setResult({})\n    }\n  }, [startText, endText])\n\n  const renderEndMarker = () => {\n    if (!end.length) {\n      return null\n    }\n    if (isSafari) {\n      return <Marker offsetTop={-16} offsetLeft={-32} longitude={end[0]} latitude={end[1]}>\n        <svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <image href=\"https://www.flaticon.com/svg/static/icons/svg/252/252025.svg\" height=\"32\" width=\"32\" />\n        </svg>\n      </Marker>\n    }\n    return <Marker offsetTop={-27} offsetLeft={-11} longitude={end[0]} latitude={end[1]}>\n      <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <image href=\"https://www.flaticon.com/svg/static/icons/svg/565/565949.svg\" height=\"12\" width=\"12\" />\n      </svg>\n      <svg transform=\"translate(-22,-8)\" width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <image href=\"https://www.flaticon.com/svg/static/icons/svg/252/252025.svg\" height=\"32\" width=\"32\" />\n      </svg>\n    </Marker>\n  }\n\n  const renderStartMarker = () => {\n    if (!start.length) return null\n    return <Marker offsetTop={-10} offsetLeft={-5} longitude={start[0]} latitude={start[1]}>\n      <svg width=\"10\" height=\"10\" xmlns=\"http://www.w3.org/2000/svg\">\n        <image href=\"https://www.flaticon.com/svg/static/icons/svg/33/33759.svg\" height=\"10\" width=\"10\" />\n      </svg>\n    </Marker>\n  }\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.drawerContainer}>\n          <Geocoder\n            label=\"Starting location\"\n            latitude={viewport.latitude}\n            longitude={viewport.longitude}\n            value={start.join(',')}\n            onChange={(start) => setStart(start)}\n            onLocationChange={v => setStartText(v)}\n          />\n          <Geocoder\n            label=\"Drop-off point\"\n            latitude={viewport.latitude}\n            longitude={viewport.longitude}\n            value={end.join(',')}\n            onChange={(end) => setEnd(end)}\n            onLocationChange={v => setEndText(v)}\n          />\n        </div>\n        <div className={classes.resultContainer}>\n          {result.total_distance && <span>Total Distance: {result.total_distance}</span>}\n          {result.total_time && <span>Total Time: {result.total_time}</span>}\n        </div>\n      </Drawer>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={process.env.REACT_APP_ACCESS_TOKEN}\n        onViewportChange={(viewport) => setViewport(viewport)}\n        onClick={handleClick}\n      >\n        <div style={{ display: 'flex', justifyContent: 'flex-end', margin: '20px' }}>\n          {\n            (!startText || !endText) && (\n              <GeolocateControl\n                positionOptions={{ enableHighAccuracy: true }}\n                trackUserLocation={true}\n              />\n            )\n          }\n        </div>\n        {\n          renderStartMarker()\n        }\n        {\n          renderEndMarker()\n        }\n        {\n          waypoints.map((item, i) =>\n            <Marker offsetTop={-10} offsetLeft={-15} longitude={Number(item[1])} latitude={Number(item[0])}>\n              <b>{++i}</b>\n            </Marker>\n          )\n        }\n        {\n          startText && endText && (\n            <PolylineOverlay points={waypoints} />\n          )\n        }\n      </ReactMapGL>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}